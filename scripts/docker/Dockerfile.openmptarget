ARG BASE=nvidia/cuda:11.1-devel-ubuntu20.04
FROM $BASE

ARG ADDITIONAL_PACKAGES

RUN apt-get update && apt-get install -y \
    bc \
    git \
    wget \
    ccache \
    python3 \
    python3-pip \
    libpython3-dev \
    libelf-dev \
    $ADDITIONAL_PACKAGES \
    && \
    apt-get --purge autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    python3 -m pip install 'cmake==3.18.4'

ARG NPROC=8

ENV LLVM_DIR=/opt/llvm
ENV PATH=${LLVM_DIR}/bin:$PATH
RUN LLVM_VERSION=887c7660bdf3f300bd1997dcfd7ace91787c0584 && \
    LLVM_URL=https://github.com/llvm/llvm-project/archive &&\
    LLVM_ARCHIVE=${LLVM_VERSION}.tar.gz &&\
    SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \
    wget --quiet ${LLVM_URL}/${LLVM_ARCHIVE} && \
    mkdir llvm-project && \
    tar -xf ${LLVM_ARCHIVE} -C llvm-project --strip-components=1 && \
    cd llvm-project && \
    mkdir build && cd build && \
    cmake \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=$LLVM_DIR \
      -DCMAKE_C_COMPILER=gcc \
      -DCMAKE_CXX_COMPILER=g++ \
      -DLLVM_ENABLE_PROJECTS="clang;libcxx;libcxxabi;openmp" \
      -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=sm_70 \
      -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=70 \
    ../llvm && \
    make -j${NPROC} && \
    make install && \
    rm -rf ../build/* && \
    cmake \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=$LLVM_DIR \
      -DCMAKE_C_COMPILER=$LLVM_DIR/bin/clang \
      -DCMAKE_CXX_COMPILER=$LLVM_DIR/bin/clang++ \
      -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=70 \
    ../openmp && \
    make -j${NPROC} && \
    make install && \
    echo "${LLVM_DIR}/lib" > /etc/ld.so.conf.d/llvm.conf && ldconfig && \
    rm -rf ${SCRATCH_DIR} && \
    update-alternatives --install $(which cc)  cc  $(which clang) 50 && \
    update-alternatives --install $(which c++) c++ $(which clang++) 50

RUN git clone https://github.com/jrmadsen/compile-time-perf.git /tmp/ctp-source && \
    cmake -B /tmp/ctp-build /tmp/ctp-source && \
    cmake --build /tmp/ctp-build --target all && \
    cmake --build /tmp/ctp-build --target install && \
    rm -rf /tmp/ctp-source /tmp/ctp-build
